@page "/weather"
@rendermode InteractiveServer
<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<p role="status">Warm days count: @warmDays</p>

<input class="form-control mb-2" @oninput="@Input" placeholder="Filter by summary..." />

<button class="btn btn-primary me-2" @onclick="WarmDaysFilter">Show only warm days</button>
<button class="btn btn-secondary" @onclick="RestoreForecasts">Restore all</button>

@if (forecasts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in filteredForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private WeatherForecast[] filteredForecasts;
    private int warmDays;

    protected override async Task OnInitializedAsync()
    {
        var rng = new Random();
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
            {
                Date = DateTime.Now.AddDays(index),
                TemperatureC = rng.Next(-10, 35),
                Summary = summaries[rng.Next(summaries.Length)]
            }).ToArray();

        filteredForecasts = forecasts;

        warmDays = forecasts.Count(f => f.TemperatureC > 15);
    }

    private void WarmDaysFilter()
    {
        filteredForecasts = forecasts
            .Where(f => f.TemperatureC > 15)
            .ToArray();
    }

    private void RestoreForecasts()
    {
        filteredForecasts = forecasts;
    }

    private void Input(ChangeEventArgs arg)
    {
        var text = arg.Value?.ToString() ?? "";
        filteredForecasts = forecasts
            .Where(f => f.Summary.Contains(text, StringComparison.OrdinalIgnoreCase))
            .ToArray();
    }

    private string[] summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    private class WeatherForecast
    {
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public string Summary { get; set; }
    }
}
